@using CatalogoProductos.Client.Services
@using CatalogoProductos.Client.Shared.Buttons
@using CatalogoProductos.Client.Shared.Cards
@using CatalogoProductos.Client.Shared.Table
@using CatalogoProductos.Shared.GeneralDTO
@using CatalogoProductos.Shared.OutDTO
@using Microsoft.AspNetCore.Authorization
@using System.Linq

@page "/ConfiguProductos"
@attribute [Authorize(Roles = "Administrador")]

<PageTitle>Configurar Productos</PageTitle>

<h2>Configurar Productos</h2>

<Loading @ref="_loading" />
<Modal @ref="_modal" />

<!-- Tabla de Productos -->
<div class="container">
    <Button Color="success" @onclick="AgregarProducto" class="mb-3">Agregar Producto</Button>
    <table class="table table-striped table-bordered table-hover custom-table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Cantidad</th>
                <th>Precio</th>
                <th>Fecha Creación</th>
                <th>Categoría</th>
                <th>Imagen</th>
                <th>Editar</th>
                <th>Eliminar</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var producto in productos)
            {
                <tr>
                    <td>
                        @if (producto.EnEdicion)
                        {
                            <input type="text" @bind="producto.Nombre" class="form-control" />
                        }
                        else
                        {
                            @producto.Nombre
                        }
                    </td>
                    <td>
                        @if (producto.EnEdicion)
                        {
                            <input type="number" @bind="producto.Cantidad" class="form-control" />
                        }
                        else
                        {
                            @producto.Cantidad
                        }
                    </td>
                    <td>
                        @if (producto.EnEdicion)
                        {
                            <input type="number" @bind="producto.Precio" step="0.01" class="form-control" />
                        }
                        else
                        {
                            @producto.Precio
                        }
                    </td>
                    <td>@producto.FechaCreacion.ToString("dd/MM/yyyy")</td>
                    <td>
                        @if (producto.EnEdicion)
                        {
                            <select @bind="producto.CategoriaId" class="form-control">
                                @foreach (var categoria in categorias)
                                {
                                    <option value="@categoria.CategoriaId">@categoria.Nombre</option>
                                }
                            </select>
                        }
                        else
                        {
                            @producto.CategoriaNombre
                        }
                    </td>
                    <td>
                        @if (producto.EnEdicion)
                        {
                            <InputFile OnChange="e => SubirImagen(e, producto)" />
                        }
                        else
                        {
                            <img src="data:image/png;base64,@producto.ImagenBase64" alt="@producto.Nombre" style="width: 100px; height: auto;" />
                        }
                    </td>
                    <td>
                        @if (producto.EnEdicion)
                        {
                            <Button Color="primary" @onclick="() => GuardarProducto(producto)" class="me-2">Guardar</Button>
                            <Button Color="secondary" @onclick="() => CancelarEdicion(producto)" class="me-2">Cancelar</Button>
                        }
                        else
                        {
                            <Button Color="warning" @onclick="() => EditarProducto(producto)" class="me-2">Editar</Button>
                        }
                    </td>
                    <td>
                        <Button Color="danger" @onclick="() => EliminarProducto(producto.ProductoId)">Eliminar</Button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<Footer/>

<style>
    .custom-table {
        width: 100%;
        border-collapse: collapse;
    }

    .custom-table th, .custom-table td {
        text-align: left;
        padding: 12px;
    }

    .custom-table th {
        background-color: #198754; /* Color del NavMenu */
        color: white;
    }

    .custom-table tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    .custom-table tr:hover {
        background-color: #ddd;
    }

    .mb-3 {
        margin-bottom: 1rem;
    }

    .me-2 {
        margin-right: 0.5rem;
    }
</style>

@code {
    [Inject] private Api ApiService { get; set; } = default!;

    Modal? _modal;
    Loading? _loading;

    private List<ProductoExtendido> productos = new List<ProductoExtendido>();
    private List<CategoriaOut> categorias = new List<CategoriaOut>();

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();
        await CargarCategorias();
    }

    private async Task CargarProductos()
    {
        _loading?.Open();
        var respuesta = await ApiService.GetApiAuth<List<ProductoOut>>("/api/Producto/ListarProductos/0");
        if (respuesta != null && respuesta.Exito)
        {
            productos = respuesta.Resultado!.Select(p => new ProductoExtendido(p, categorias)).ToList();
        }
        else
        {
            _modal?.OpenModalError("Error", "No se pudieron cargar los productos.");
        }
        _loading?.Close();
    }

    private async Task CargarCategorias()
    {
        var respuesta = await ApiService.GetApiAuth<List<CategoriaOut>>("/api/Categoria/Listar/Categorias");
        if (respuesta != null && respuesta.Exito)
        {
            categorias = respuesta.Resultado!;
        }
    }

    private void AgregarProducto()
    {
        var nuevoProducto = new ProductoExtendido { Nombre = "Nuevo Producto", EnEdicion = true, FechaCreacion = DateTime.Now };
        productos.Add(nuevoProducto);
    }

    private void EditarProducto(ProductoExtendido producto)
    {
        producto.EnEdicion = true;
    }

    private async Task GuardarProducto(ProductoExtendido producto)
    {
        _loading?.Open();
        if (producto.ProductoId == 0)
        {
            // Crear un nuevo producto
            var productoIn = new ProductoIn
            {
                Nombre = producto.Nombre,
                Cantidad = producto.Cantidad,
                Precio = producto.Precio,
                FechaCreacion = producto.FechaCreacion,
                CategoriaId = producto.CategoriaId,
                ImagenBase64 = producto.ImagenBase64
            };

            var respuesta = await ApiService.PostApiAuth<RespuestaDto>("/api/Producto/CrearProducto", productoIn);
            if (respuesta != null && respuesta.Exito)
            {
                _modal?.OpenModalSuccess("Éxito", "Producto creado exitosamente.");
                await CargarProductos();
            }
            else
            {
                _modal?.OpenModalError("Error", "No se pudo crear el producto.");
            }
        }
        else
        {
            // Editar un producto existente
            var productoIn = new ProductoIn
            {
                Nombre = producto.Nombre,
                Cantidad = producto.Cantidad,
                Precio = producto.Precio,
                FechaCreacion = producto.FechaCreacion,
                CategoriaId = producto.CategoriaId,
                ImagenBase64 = producto.ImagenBase64
            };

            var respuesta = await ApiService.PostApiAuth<RespuestaDto>($"/api/Producto/ActualizarProducto/{producto.ProductoId}", productoIn);
            if (respuesta != null && respuesta.Exito)
            {
                _modal?.OpenModalSuccess("Éxito", "Producto editado exitosamente.");
                await CargarProductos();
            }
            else
            {
                _modal?.OpenModalError("Error", "No se pudo editar el producto.");
            }
        }
        _loading?.Close();
    }

    private async Task EliminarProducto(int productoId)
    {
        _loading?.Open();
        var respuesta = await ApiService.PostApiAuth<RespuestaDto>($"/api/Producto/EliminarProducto/{productoId}", new { });
        if (respuesta != null && respuesta.Exito)
        {
            _modal?.OpenModalSuccess("Éxito", "Producto eliminado exitosamente.");
            await CargarProductos();
        }
        else
        {
            _modal?.OpenModalError("Error", respuesta.Mensaje);
        }
        _loading?.Close();
    }

    private async Task SubirImagen(InputFileChangeEventArgs e, ProductoExtendido producto)
    {
        var archivos = e.GetMultipleFiles();
        if (archivos.Count > 0)
        {
            var archivo = archivos[0];
            var buffer = new byte[archivo.Size];
            await archivo.OpenReadStream().ReadAsync(buffer);
            producto.ImagenBase64 = Convert.ToBase64String(buffer);
        }
    }

    private void CancelarEdicion(ProductoExtendido producto)
    {
        if (producto.ProductoId == 0)
        {
            productos.Remove(producto);
        }
        else
        {
            producto.EnEdicion = false;
        }
    }

    private class ProductoExtendido : ProductoOut
    {
        public bool EnEdicion { get; set; } = false;
        public string CategoriaNombre => categorias.FirstOrDefault(c => c.CategoriaId == this.CategoriaId)?.Nombre ?? "Sin Categoría";

        public ProductoExtendido() { }

        public ProductoExtendido(ProductoOut producto, List<CategoriaOut> categorias)
        {
            this.ProductoId = producto.ProductoId;
            this.Nombre = producto.Nombre;
            this.Cantidad = producto.Cantidad;
            this.Precio = producto.Precio;
            this.FechaCreacion = producto.FechaCreacion;
            this.CategoriaId = producto.CategoriaId;
            this.ImagenBase64 = producto.ImagenBase64;
            this.categorias = categorias;
        }

        private List<CategoriaOut> categorias;
    }

    private class ProductoIn
    {
        public string Nombre { get; set; } = string.Empty;
        public int Cantidad { get; set; }
        public decimal Precio { get; set; }
        public DateTime FechaCreacion { get; set; }
        public int? CategoriaId { get; set; }
        public string? ImagenBase64 { get; set; }
    }
}